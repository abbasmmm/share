private static DataKey RetrieveActiveKeyFromDatabase(int keyRotationFrequencyInDays)
{
    using (var connection = new SqlConnection(ConnectionString))
    {
        connection.Open();

        using (var transaction = connection.BeginTransaction()) // Start transaction
        {
            try
            {
                // Apply exclusive table lock (TABLOCKX) during key creation to prevent other processes from creating keys
                using (var cmd = new SqlCommand(
                    "SELECT TOP 1 EncryptedDataKeyId, EncryptedKey, CreatedAtUTC " +
                    "FROM EncryptedDataKey WITH (TABLOCKX) " +  // Exclusive table lock
                    "WHERE GETUTCDATE() < DATEADD(DAY, @KeyRotationFrequencyInDays, CreatedAtUTC) " +
                    "ORDER BY CreatedAtUTC DESC", connection, transaction))
                {
                    cmd.Parameters.AddWithValue("@KeyRotationFrequencyInDays", keyRotationFrequencyInDays);

                    using (var reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            // No commit is needed for SELECT
                            return BuildDataKey(reader); // Return the key directly after reading
                        }
                    }
                }

                // If no valid key found, generate a new one and insert it
                var newDataKey = AwsUtil.GenerateDataKey(keyRotationFrequencyInDays);

                const string insertQuery = "INSERT INTO EncryptedDataKey (EncryptedKey, CreatedAtUTC) " +
                                           "OUTPUT INSERTED.EncryptedDataKeyId VALUES (@EncryptedKey, @CreatedAtUTC)";

                using (var insertCmd = new SqlCommand(insertQuery, connection, transaction))
                {
                    insertCmd.Parameters.AddWithValue("@EncryptedKey", newDataKey.EncryptedDataKey);
                    insertCmd.Parameters.AddWithValue("@CreatedAtUTC", newDataKey.CreatedAtUTC);

                    newDataKey.Id = (int)insertCmd.ExecuteScalar();
                }

                transaction.Commit(); // Commit only after the INSERT
                return newDataKey;
            }
            catch (SqlException ex)
            {
                transaction.Rollback(); // Rollback if there's an error
                throw;
            }
        }
    }

    DataKey BuildDataKey(SqlDataReader reader)
    {
        var encryptedKey = (byte[])reader["EncryptedKey"];
        return new DataKey
        {
            Id = reader.GetInt32(0),
            EncryptedDataKey = encryptedKey,
            PlainDataKey = AwsUtil.DecryptDataKey(encryptedKey),
            CreatedAtUTC = reader.GetDateTime(2),
            ValidToDateUTC = reader.GetDateTime(2).AddDays(keyRotationFrequencyInDays),
        };
    }
}
